"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var EXTHRecord_1 = __importDefault(require("js-mobi/EXTHRecord"));
var EXTHHeader = /** @class */ (function () {
    function EXTHHeader(uint8, exthHeaderOffset) {
        this.exthHeaderOffset = exthHeaderOffset;
        var utf8decoder = new TextDecoder('utf-8');
        var dv = new DataView(uint8.buffer);
        var identifier = utf8decoder.decode(uint8.slice(exthHeaderOffset, exthHeaderOffset + 4));
        var recordCount = dv.getUint32(exthHeaderOffset + 8);
        if (identifier !== 'EXTH') {
            throw new TypeError("Expected to find EXTH header identifier EXTH but got \"" + identifier + "\" instead");
        }
        this.records = [];
        for (var i = 0; i < recordCount; i++) {
            var exthRecord = EXTHRecord_1.default.readEXTHRecord(uint8, this.getRecordOffset(i));
            this.records.push(exthRecord);
        }
    }
    EXTHHeader.readEXTHHeader = function (uint8, exthHeaderOffset) {
        return new EXTHHeader(uint8, exthHeaderOffset);
    };
    EXTHHeader.prototype.getRecordOffset = function (record) {
        var offset = this.exthHeaderOffset + 12;
        for (var i = 0; i < record; i++) {
            var exthRecord = this.records[i];
            offset += exthRecord.getRecordLength();
        }
        return offset;
    };
    Object.defineProperty(EXTHHeader.prototype, "size", {
        get: function () {
            var recordsLength = this.allRecordsLength();
            // first three header fields with 4 bytes for each.
            return 12 + recordsLength + this.paddingSize(recordsLength);
        },
        enumerable: false,
        configurable: true
    });
    EXTHHeader.prototype.allRecordsLength = function () {
        var size = 0;
        for (var _i = 0, _a = this.records; _i < _a.length; _i++) {
            var record = _a[_i];
            size += record.getRecordLength();
        }
        return size;
    };
    EXTHHeader.prototype.paddingSize = function (dataSize) {
        var paddingSize = dataSize % 4;
        return paddingSize === 0 ? 0 : 4 - paddingSize;
    };
    return EXTHHeader;
}());
exports.default = EXTHHeader;
//# sourceMappingURL=EXTHHeader.js.map