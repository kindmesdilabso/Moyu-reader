"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var PDBHeader_1 = __importDefault(require("js-mobi/PDBHeader"));
var MobiContentHeader_1 = __importDefault(require("js-mobi/MobiContentHeader"));
var MobiContent_1 = __importStar(require("js-mobi/MobiContent"));
var PalmHeader_1 = __importStar(require("js-mobi/PalmHeader"));
var MobiLz77_1 = require("js-mobi/MobiLz77");
var utils_1 = require("js-mobi/utils");
var Mobi = /** @class */ (function () {
    function Mobi(pdbHeader, palmHeader, mobiContentHeader, mobiContent) {
        this.pdbHeader = pdbHeader;
        this.palmHeader = palmHeader;
        this.mobiContentHeader = mobiContentHeader;
        this.mobiContent = mobiContent;
    }
    Mobi.read = function (uint8) {
        var pdbHeader = PDBHeader_1.default.readHeader(uint8);
        var recordDataOffset0 = pdbHeader.records[0].recordDataOffset;
        var recordDataOffset1 = pdbHeader.records[1].recordDataOffset;
        var palmHeader = PalmHeader_1.default.readPalmHeader(uint8, recordDataOffset0);
        var mobiContentHeader = MobiContentHeader_1.default.readMobiContentHeader(uint8, recordDataOffset0 + PalmHeader_1.PalmHeaderLength, recordDataOffset1 - recordDataOffset0 - PalmHeader_1.PalmHeaderLength);
        var mobiContent = MobiContent_1.default.readMobiContent(uint8, pdbHeader, palmHeader, mobiContentHeader);
        return new Mobi(pdbHeader, palmHeader, mobiContentHeader, mobiContent);
    };
    Mobi.prototype.getTextContent = function () {
        var compression = this.palmHeader.compression;
        var buffers = [];
        for (var i = 0; i < this.mobiContent.length; i++) {
            var mobiContent = this.mobiContent[i];
            if (mobiContent.type === MobiContent_1.MobiContentType.CONTENT) {
                var decoded = void 0;
                if (compression === PalmHeader_1.PalmHeaderCompression.NONE) {
                    decoded = mobiContent.content;
                }
                else if (compression === PalmHeader_1.PalmHeaderCompression.PALM_DOC) {
                    decoded = MobiLz77_1.lz77Decode(mobiContent.content);
                }
                else if (compression === PalmHeader_1.PalmHeaderCompression.HUFF_CDIC) {
                    // TODO
                    throw new Error('HUFF/CDIC encoding is not supported.');
                }
                else {
                    throw new Error('Compression not supported ' + compression);
                }
                buffers.push(decoded);
            }
        }
        return new TextDecoder().decode(utils_1.combineUint8array(buffers));
    };
    Mobi.prototype.getCharacterEncoding = function () {
        var characterEncoding = this.mobiContentHeader.textEncoding;
        if (characterEncoding != null) {
            return characterEncoding;
        }
        // throw new UnsupportedEncodingException("Invalid character encoding " + mobiHeader.getTextEncoding());
    };
    return Mobi;
}());
exports.default = Mobi;
//# sourceMappingURL=Mobi.js.map