"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lz77Encode = exports.lz77Decode = void 0;
function lz77Decode(input) {
    var out = new Uint8Array(input.length * 8);
    var i = 0;
    var o = 0;
    while (i < input.length) {
        var c = input[i++] & 0x00ff;
        if (c >= 0x01 && c <= 0x08) {
            for (var j = 0; j < c && i + j < input.length; j++) {
                out[o++] = input[i + j];
            }
            i += c;
        }
        else if (c <= 0x7f) {
            out[o++] = c;
        }
        else if (c >= 0xc0) {
            out[o++] = 32;
            out[o++] = c ^ 0x80;
        }
        else if (c <= 0xbf) {
            if (i < input.length) {
                c = (c << 8) | (input[i++] & 0xff);
                var length_1 = (c & 0x0007) + 3;
                var location_1 = (c >> 3) & 0x7ff;
                if (location_1 > 0 && location_1 <= o) {
                    for (var j = 0; j < length_1; j++) {
                        var idx = o - location_1;
                        out[o++] = out[idx];
                    }
                }
                else {
                    // invalid idx
                }
            }
        }
        else {
            // unknown input
        }
    }
    return out.slice(0, o);
}
exports.lz77Decode = lz77Decode;
function lz77Encode(b) {
    var out = [];
    var i = 0;
    var tempLen = 0;
    var compound;
    var temp = new Uint8Array(8);
    while (i < b.length) {
        var c = b[i];
        if (i > 10 && b.length - i > 10) {
            var isContinue = false;
            for (var chunkLength = 10; chunkLength > 2; chunkLength--) {
                var j = find(b, i, chunkLength);
                var dist = i - j;
                if (j < i && dist <= 2047) {
                    compound = (dist << 3) + chunkLength - 3;
                    out.push(0x80 + (compound >> 8));
                    out.push(compound & 0xff);
                    i += chunkLength;
                    isContinue = true;
                    break;
                }
            }
            if (isContinue) {
                continue;
            }
        }
        i++;
        if (c === 32 && i < b.length) {
            if (b[i] >= 0x40 && b[i] <= 0x7f) {
                out.push(b[i] ^ 0x80);
                i++;
                continue;
            }
        }
        if (c === 0 || (c > 8 && c < 0x80)) {
            out.push(c);
        }
        else {
            var j = i;
            temp[0] = c;
            tempLen = 1;
            while (j < b.length && tempLen < 8) {
                c = b[j];
                if (c == 0 || (c > 8 && c < 0x80)) {
                    break;
                }
                temp[tempLen++] = c;
                j++;
            }
            i += tempLen - 1;
            out.push(tempLen);
            for (j = 0; j < tempLen; j++) {
                out.push(temp[j]);
            }
        }
    }
    return Uint8Array.from(out);
}
exports.lz77Encode = lz77Encode;
function find(data, pos, chunkLength) {
    for (var i = pos - chunkLength; i > -1; i--) {
        if (compare(data, i, pos, chunkLength)) {
            return i;
        }
    }
    return pos;
}
function compare(data, off1, off2, len) {
    for (var i = 0; i < len; i++) {
        if (data[off1 + i] !== data[off2 + i]) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=MobiLz77.js.map