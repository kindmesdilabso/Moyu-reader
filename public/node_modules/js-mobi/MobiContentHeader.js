"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextEncoding = void 0;
var EXTHHeader_1 = __importDefault(require("js-mobi/EXTHHeader"));
var MobiContent_1 = require("js-mobi/MobiContent");
var TextEncoding;
(function (TextEncoding) {
    TextEncoding[TextEncoding["CP1252"] = 1252] = "CP1252";
    TextEncoding[TextEncoding["UTF8"] = 65001] = "UTF8";
    TextEncoding[TextEncoding["UTF16"] = 65002] = "UTF16";
})(TextEncoding = exports.TextEncoding || (exports.TextEncoding = {}));
var DEFAULT_HEADER_LENGTH = 264;
var MobiContentHeader = /** @class */ (function () {
    function MobiContentHeader(uint8, recordDataOffset, recordDataLength) {
        this.content = uint8.slice(recordDataOffset, recordDataOffset + recordDataLength);
        var dv = new DataView(this.content.buffer);
        var utf8decoder = new TextDecoder('utf-8');
        this.type = MobiContent_1.MobiContentType.HEADER;
        this.identifier = utf8decoder.decode(this.content.slice(0, 4));
        if (this.identifier !== 'MOBI') {
            throw new TypeError("Expected to find EXTH header identifier EXTH but got \"" + this.identifier + "\" instead");
        }
        var headerLength = dv.getUint32(4);
        this.mobiType = dv.getUint32(8);
        this.textEncoding = dv.getUint32(12);
        this.uniqueID = dv.getUint32(16);
        this.fileVersion = dv.getUint32(20);
        this.orthographicIndex = dv.getUint32(24);
        this.inflectionIndex = dv.getUint32(28);
        this.indexNames = dv.getUint32(32);
        this.indexKeys = dv.getUint32(36);
        this.extraIndex0 = dv.getUint32(40);
        this.extraIndex1 = dv.getUint32(44);
        this.extraIndex2 = dv.getUint32(48);
        this.extraIndex3 = dv.getUint32(52);
        this.extraIndex4 = dv.getUint32(56);
        this.extraIndex5 = dv.getUint32(60);
        this.firstNonBookIndex = dv.getUint32(64);
        this.fullNameOffset = dv.getUint32(68);
        this.fullNameLength = dv.getUint32(72);
        this.locale = dv.getUint32(76);
        this.inputLanguage = dv.getUint32(80);
        this.outputLanguage = dv.getUint32(84);
        this.minVersion = dv.getUint32(88);
        this.firstImageIndex = dv.getUint32(92);
        this.huffmanRecordOffset = dv.getUint32(96);
        this.huffmanRecordCount = dv.getUint32(100);
        this.huffmanTableOffset = dv.getUint32(104);
        this.huffmanTableLength = dv.getUint32(108);
        this.exthFlags = dv.getUint32(112);
        // optional contents
        if (headerLength >= 194) {
            this.firstContentRecordIndex = dv.getUint16(176);
        }
        if (headerLength >= 196) {
            this.lastContentRecordIndex = dv.getUint16(178);
        }
        if (headerLength >= 204) {
            this.fcisRecordIndex = dv.getUint32(184);
        }
        if (headerLength >= 208) {
            this.fcisRecordCount = dv.getUint32(188);
        }
        if (headerLength >= 212) {
            this.flisRecordIndex = dv.getUint32(192);
        }
        if (headerLength >= 216) {
            this.flisRecordCount = dv.getUint32(196);
        }
        if (headerLength >= 228) {
            this.srcsRecordIndex = dv.getUint32(208);
        }
        if (headerLength >= 232) {
            this.srcsRecordCount = dv.getUint32(212);
        }
        if (headerLength >= 244) {
            this.extraRecordDataFlags = dv.getUint32(224);
        }
        if (headerLength >= 248) {
            this.indxRecordIndex = dv.getUint32(228);
        }
        if (headerLength >= 256) {
            this.fragmentRecordIndex = dv.getUint32(236);
        }
        if (headerLength >= 264) {
            this.skeletonRecordIndex = dv.getUint32(244);
        }
        if (headerLength >= 268) {
            this.datpRecordIndex = dv.getUint32(248);
        }
        if (headerLength >= 276) {
            this.datpRecordIndex = dv.getUint32(256);
        }
        if (this.isExthExists) {
            this.exthHeader = EXTHHeader_1.default.readEXTHHeader(this.content, headerLength);
        }
        var remainderOffsetStart = DEFAULT_HEADER_LENGTH + this.exthHeaderSize;
        this.remainder = this.content.slice(remainderOffsetStart, recordDataLength);
    }
    MobiContentHeader.readMobiContentHeader = function (uint8, recordDataOffset, recordDataLength) {
        return new MobiContentHeader(uint8, recordDataOffset, recordDataLength);
    };
    Object.defineProperty(MobiContentHeader.prototype, "isExthExists", {
        get: function () {
            return (this.exthFlags & 0x40) !== 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MobiContentHeader.prototype, "exthHeaderSize", {
        get: function () {
            return this.exthHeader == null ? 0 : this.exthHeader.size;
        },
        enumerable: false,
        configurable: true
    });
    MobiContentHeader.prototype.getEXTHRecords = function (type) {
        var _a, _b;
        var resultRecords = [];
        var records = (_b = (_a = this.exthHeader) === null || _a === void 0 ? void 0 : _a.records) !== null && _b !== void 0 ? _b : [];
        for (var _i = 0, records_1 = records; _i < records_1.length; _i++) {
            var record = records_1[_i];
            if (record.recordType === type) {
                resultRecords.push(record);
            }
        }
        return resultRecords;
    };
    return MobiContentHeader;
}());
exports.default = MobiContentHeader;
//# sourceMappingURL=MobiContentHeader.js.map